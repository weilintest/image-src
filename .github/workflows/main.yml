name: build-and-push

on:
  pull_request:
    branches: main
  push:
    branches: main
    tags:
      - v*

jobs:
  buildx:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY }}
          name: id_rsa # optional
          known_hosts: ${{ secrets.KNOWN_HOSTS }}

      - name: sync over ssh
        run: |
          git clone --single-branch --depth 1 git@github.com:tier4/AutowareArchitectureProposal.git  
          git clone --single-branch --depth 1 git@github.com:astuff/kvaser_interface.git  AutowareArchitectureProposal/src/vendor/kvaser_interface  
          cd AutowareArchitectureProposal
          echo $PWD
          echo "deb http://packages.ros.org/ros/ubuntu bionic main" >  vcs.list
          sudo mv vcs.list /etc/apt/sources.list.d/
          curl -sSL 'http://keyserver.ubuntu.com/pks/lookup?op=get&search=0xC1CF6E31E6BADE8868B172B4F42ED6FBAB17C654' | sudo apt-key add -
          sudo apt-get update && DEBIAN_FRONTEND=noninteractive sudo apt-get install --no-install-recommends -y     python3-vcstool
          vcs import src < autoware.proj.repos
         
      -
        name: Prepare
        id: prepare
        run: |
          cd /home/runner/work/image-src/image-src/AutowareArchitectureProposal
          DOCKER_PLATFORMS=linux/amd64,linux/arm64
          SOURCE_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          SOURCE_COMMIT=$(git rev-list --max-parents=0 HEAD)
          COMMIT_MSG=$(git log -1 HEAD --pretty=format:%s)
          COMMIT_MSG=${COMMIT_MSG//[ ()]/-}
          DOCKER_REPO=ghcr.io/weilintest/image-src
          DOCKERFILE_PATH=./Dockerfile
          DOCKER_TAG=latest
          IMAGE_NAME=${DOCKER_REPO}:${DOCKER_TAG}
          DOCKER_IMAGE=${DOCKER_REPO}
          echo ${SOURCE_COMMIT} > src/SRC_SHA
          echo ${VERSION} > src/SRC_VER
          VERSION=latest
          echo $(git tag -l)
          echo ${VERSION}
          if [[ $(git tag -l) ]]; then

            VERSION=${git describe --tags --abbrev=0}
            DOCKER_TAG=${VERSION}
            echo ${VERSION}
            echo ${DOCKER_TAG}
          fi
          if [ "${{ github.event_name }}" = "schedule" ]; then
            VERSION=nightly
          fi

          TAGS="--tag ${DOCKER_IMAGE}:${DOCKER_TAG}"
          if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            TAGS="$TAGS --tag ${DOCKER_IMAGE}:latest"
          fi

          echo ::set-output name=docker_image::${DOCKER_IMAGE}
          echo ::set-output name=tag::${DOCKER_TAG}
          echo ::set-output name=buildx_args::--platform ${DOCKER_PLATFORMS} \
            --build-arg VERSION=${VERSION} \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --build-arg SOURCE_BRANCH=${SOURCE_BRANCH} \
            --build-arg SOURCE_COMMIT=${SOURCE_COMMIT} \
            --build-arg COMMIT_MSG=${COMMIT_MSG} \
            --build-arg DOCKER_REPO=${DOCKER_REPO} \
            --build-arg DOCKERFILE_PATH=${DOCKERFILE_PATH} \
            --build-arg DOCKER_TAG=${DOCKER_TAG} \
            --build-arg IMAGE_NAME=${IMAGE_NAME} \
            --build-arg SOURCE_COMMIT=${SOURCE_COMMIT} \
            --build-arg VERSION=${VERSION} \
            ${TAGS} --file ./Dockerfile .
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
#       uses: crazy-max/ghaction-docker-buildx@v3
#      -
#        name: Login to DockerHub
#        if: success() && github.event_name != 'pull_request'
#        uses: docker/login-action@v1
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }} 
#          password: ${{ secrets.DOCKER_PASSWORD }}
      -
        name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}
      -
        name: Docker Buildx (push)
        if: success() && github.event_name != 'pull_request'
        run: |
          docker buildx build --output "type=image,push=true" ${{ steps.prepare.outputs.buildx_args }}
      -
        name: Inspect image
        if: always() && github.event_name != 'pull_request'
        run: |
          docker buildx imagetools inspect ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.tag }}
